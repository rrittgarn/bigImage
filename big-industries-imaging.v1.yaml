openapi: 3.0.0
info:
  title: Big Industries Imaging
  version: '1.0'
  contact:
    name: Ryan Rittgarn
    url: www.bigindustries.com/help
    email: ryan@bigindustries.com
  termsOfService: api.bigindustries.com/tos.html
  description: 'Big Industries - Imaging API. For use with our on-site customer imaging platform. '
servers:
  - url: 'http://api.bigindustries.com/v1'
    description: API
paths:
  /login:
    post:
      summary: Login
      tags:
        - Authentication
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                  availableModules:
                    type: array
                    items:
                      type: string
                  userData:
                    $ref: '#/components/schemas/User'
              examples:
                User Login:
                  value:
                    token: d514c63de975fc243b2eaf6ccf776dc4
                    availableModules:
                      - imaging
                      - planning
                      - purchasing
                    userData:
                      id: 102
                      fullName: Tom Petty
                      title: Purchasing
                      contactNumber: 800-867-5309
                      securityRole: 22
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                  errorID:
                    type: integer
              examples:
                Bad Username or Password:
                  value:
                    error: Bad Username or Password
                    errorId: 1001
        '403':
          description: Forbidden
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                  errorID:
                    type: integer
              examples:
                Server Error:
                  value:
                    error: Serverside Error has occurred. Please contact support with ID 1002
                    errorID: 1002
      operationId: post-v1-login
      description: 'Login process to get user token that will be used for all subsequent requests. '
      parameters:
        - schema:
            type: string
            pattern: /@/
          in: query
          name: email
          description: Fully Qualified Email Address
          required: true
        - schema:
            type: string
          in: query
          name: password
          description: Password
          required: true
    parameters: []
  /toolimage:
    post:
      summary: Add new captured tool
      operationId: post-v1-toolimage
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: integer
                    description: 'Should always match the http response code. '
                  bigToolID:
                    type: integer
                    description: 'Big Industries internal id for this new tool '
              examples:
                New Tool Success:
                  value:
                    status: 200
                    bigToolID: 202
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: integer
                  errorID:
                    type: integer
                  errorDescription:
                    type: string
      description: 'Store a tool image in the Big Industries tool API. System automatically creates a vector and stores relevant information with the objects. '
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                Brand:
                  type: string
                UPC:
                  type: string
                isSet:
                  type: boolean
                Description:
                  type: string
                Category:
                  type: string
                Unit:
                  description: Autogenerated Upon Insert
                  type: string
                toolThickness:
                  type: string
                DisplaySVG:
                  type: string
                CutSVG:
                  type: string
            examples:
              example-1:
                value:
                  Brand: string
                  UPC: string
                  isSet: true
                  Description: string
                  Category: string
                  Unit: string
                  toolThickness: string
                  DisplaySVG: string
                  CutSVG: string
          multipart/form-data:
            schema:
              type: object
              properties:
                capturedImage: {}
            examples:
              ImageData:
                value:
                  capturedImage: filename.png
        description: |-
          Body should include as much information as possible. 

          form-data is expecting an image file (svg) and the accompanying json file. This matches current scanner output. 
      tags:
        - Tool Imaging
    parameters: []
  /brands:
    get:
      summary: Get All Brands
      tags:
        - Brands
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: integer
                  brands:
                    type: array
                    items:
                      $ref: '#/components/schemas/Brand'
              examples:
                Get all Brands:
                  value:
                    status: 200
                    brands:
                      - brandID: 100
                        brandName: SK
                        brandImage: /resources/brands/logo/small/sk.png
                      - brandID: 101
                        brandName: SnapOn
                        brandImage: /resources/brands/logo/small/snapon.png
      operationId: get-v1-brands
      description: 'Get the available tool brands from the database to associate a tool. '
      security:
        - Bearer Token: []
    post:
      summary: Create new brand
      operationId: post-v1-brands
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: integer
                  brandID:
                    type: string
              examples:
                Create Result:
                  value:
                    status: 200
                    brandID: 103
      description: |
        Create a new Brand. Admin User Level required. 
      security:
        - Bearer Token: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                brandName:
                  type: string
            examples:
              New Brand:
                value:
                  brandName: Ideal Tools
      tags:
        - Brands
    parameters: []
  '/layout/gettool/{toolID}':
    parameters:
      - schema:
          type: string
        name: toolID
        in: path
        required: true
    get:
      summary: Get individual tool by ID
      tags:
        - Layout
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
      operationId: get-layout-gettool-toolID
      description: 'Will return the tool SVG-ID, as well as the details regarding the tool. '
      security:
        - Bearer Token: []
  /layout/gettool:
    get:
      summary: Get all tools available
      tags:
        - Layout
      responses: {}
      operationId: get-laout-gettool
      description: Returns all tools available to the user paginated by preference
      security:
        - Bearer Token: []
    parameters: []
  /layout/savelayout:
    post:
      summary: Save Layout
      operationId: post-layout-savelayout
      responses:
        '200':
          description: OK
      tags:
        - Layout
      description: 'Saves all of the current IDs and their positions / rotation on the layout. '
      security:
        - Bearer Token: []
  /layout/getsaved:
    get:
      summary: Get saved layouts
      tags:
        - Layout
      responses: {}
      operationId: get-layout-getsaved
      security:
        - Bearer Token: []
      description: 'Returns a list of saved layouts and their last modified dates. '
  '/layout/getsaved/{layoutID}':
    parameters:
      - schema:
          type: string
        name: layoutID
        in: path
        required: true
    get:
      summary: Get saved layout by ID
      tags:
        - Layout
      responses: {}
      operationId: get-layout-getsaved-layoutID
      security:
        - Bearer Token: []
      description: 'Returns the full layout with positional data. '
  '/toolimage/{toolID}':
    parameters:
      - schema:
          type: string
        name: toolID
        in: path
        required: true
    get:
      summary: Get specific tool by ID
      tags:
        - Tool Imaging
      responses:
        '200':
          description: OK
          headers: {}
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tool'
              examples:
                Small Screwdriver:
                  value:
                    _id:
                      $oid: 5f714af2668a68303229bd72
                    Brand: SK
                    UPC: '85310'
                    isSet: false
                    Description: Small Screwdriver
                    Category: Screwdrivers & Nut Drivers
                    Unit: NA
                    toolThickness: '1.125'
                    DisplaySVG: "<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"3.78881in\" height=\"1.16011in\" viewBox=\"0 0 272.7943 83.52779\">\r\n </svg>\r\n"
                    CutSVG: "<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"3.78881in\" height=\"1.16011in\" viewBox=\"0 0 272.7943 83.52779\">\r\n </svg>\r\n"
                    importDate: '1601766752'
        '403':
          description: Created
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                  reason:
                    type: string
              examples:
                Forbidden:
                  value:
                    status: '403'
                    reason: Unauthorized access or tool not found. This event has been logged.
      operationId: get-toolimage-toolID
      description: Expects the UID of the tool in question (_id field value). Provides single tool details
      parameters: []
  CORS:
    options:
      summary: HTML Options (CORS)
      operationId: optionsv1
      responses:
        '204':
          description: CORS response will allow our internal domains
          headers:
            'Access-Control-Allow-Origin: *.cfpsecure.com':
              schema:
                type: string
            'Access-Control-Allow-Methods: GET, POST, PATCH, PUT, DELETE, OPTIONS':
              schema:
                type: string
            'Access-Control-Allow-Headers: Origin, Content-Type, X-Auth-Token':
              schema:
                type: string
            'Cache-Control: max-age=86400':
              schema:
                type: string
            'Access-Control-Max-Age: 86400':
              schema:
                type: string
      parameters: []
      description: 'CORS Options response, will respond on any sub-endpoint below /v1/ '
    parameters: []
  /toolimage/all:
    get:
      summary: Get all available tool images
      tags:
        - Tool Imaging
      responses: {}
      operationId: get-toolimage-all
      description: 'Returns all tools visible to user '
  /drawer:
    post:
      summary: Create a new drawer
      operationId: post-drawer
      responses:
        '200':
          description: OK
      description: Create a new Drawer
      tags:
        - Drawer Management
  /drawer/all:
    get:
      summary: Get all available drawers
      tags:
        - Drawer Management
      responses: {}
      operationId: get-drawer-all
      description: ''
  '/drawer/{jobID}':
    parameters:
      - schema:
          type: string
        name: jobID
        in: path
        required: true
    get:
      summary: Get all drawers in the supplied Job
      tags:
        - Drawer Management
      responses: {}
      operationId: get-drawer-jobID
  /job:
    post:
      summary: Create a Job
      operationId: post-job
      responses:
        '200':
          description: OK
      description: ''
      tags:
        - Job Management
    delete:
      summary: Delete a Job
      operationId: delete-job
      responses:
        '200':
          description: OK
      description: ''
      tags:
        - Job Management
  /job/all:
    get:
      summary: Get all Jobs
      tags:
        - Job Management
      responses: {}
      operationId: get-job-all
      description: ''
  /job/active:
    get:
      summary: Get Active Jobs
      tags:
        - Job Management
      responses: {}
      operationId: get-job-active
      description: ''
    post:
      summary: Mark Job as Active
      operationId: post-job-active
      responses:
        '200':
          description: OK
      description: 'Mark Job as Active. Requires Job ID to activate. '
      parameters:
        - schema:
            type: string
          in: query
          name: jobId
      tags:
        - Job Management
  /job/inactive:
    get:
      summary: Get all inactive jobs
      tags:
        - Job Management
      responses: {}
      operationId: get-job-inactive
    post:
      summary: Mark job as inactive
      operationId: post-job-inactive
      responses:
        '200':
          description: OK
      tags:
        - Job Management
  '/job/{JobID}':
    parameters:
      - schema:
          type: string
        name: JobID
        in: path
        required: true
    get:
      summary: Get Job Details for job by ID
      tags:
        - Job Management
      responses: {}
      operationId: get-job-JobID
components:
  schemas:
    User:
      title: User
      type: object
      x-examples:
        Basic User:
          id: 102
          fullName: Tom Petty
          title: Purchasing
          contactNumber: 800-867-5309
          securityRole: 22
          availableBrands:
            - 101
            - 102
            - 103
        BasicUser with preferences:
          id: 102
          fullName: Tom Petty
          title: Purchasing
          contactNumber: 800-867-5309
          securityRole: 22
          availableBrands:
            - 101
            - 102
            - 103
          preferences:
            pageSize: 25
            rememberMe: true
      description: 'User object used in multiple calls. Describes permissions, brand availability, and preferences for a user. '
      x-tags:
        - Models
      properties:
        id:
          type: integer
        fullName:
          type: string
        title:
          type: string
        contactNumber:
          type: string
        securityRole:
          type: integer
        availableBrands:
          type: array
          items:
            $ref: '#/components/schemas/Brand'
        preferences:
          type: object
          description: 'If the user has set any UI preferences that should persist between browsers they will save here. '
          properties:
            pageSize:
              type: integer
              description: 'When getting any list of items from the API, how big should the page size be (pagination)'
            rememberMe:
              type: boolean
              description: If we should save the username in cookies (remember me checkbox)
      required:
        - id
    Brand:
      title: Brand
      type: object
      x-examples:
        Brand:
          brandID: 100
          brandName: SK
          brandImage: /resources/brands/logo/small/sk.png
      properties:
        brandID:
          type: integer
        brandName:
          type: string
        brandLogo:
          type: string
        active:
          type: boolean
          default: true
          description: 'If a brand is added and is not active, parts associated with that brand will not be visible to all users'
      x-tags:
        - Models
    Tool:
      title: Tool
      type: object
      x-examples:
        Small Screwdriver:
          _id:
            $oid: 5f714af2668a68303229bd72
          Brand: SK
          UPC: '85310'
          isSet: false
          Description: Small Screwdriver
          Category: Screwdrivers & Nut Drivers
          Unit: NA
          toolThickness: '1.125'
          DisplaySVG: "<svg xmlns=\"http://www.w3.org/2000/svg\">\r\n </svg>\r\n"
          CutSVG: "<svg xmlns=\"http://www.w3.org/2000/svg\">\r\n </svg>\r\n"
          importDate: '1601766752'
      x-tags:
        - Models
      properties:
        _id:
          type: string
          description: Autogenerated MongoDB _id property
        Brand:
          type: string
        UPC:
          type: string
        isSet:
          type: boolean
        Description:
          type: string
        Category:
          type: string
        Unit:
          type: string
        toolThickness:
          type: string
        DisplaySVG:
          type: string
        CutSVG:
          type: string
        importDate:
          type: integer
        SecurityAssociations:
          type: array
          description: Private Property
          items:
            type: string
      required:
        - _id
        - Brand
        - UPC
    Set:
      title: Set
      type: object
      properties:
        setId:
          type: integer
        toolId:
          type: array
          items:
            $ref: '#/components/schemas/Tool'
        setName:
          type: string
        mfrPN:
          type: string
        brandID:
          type: integer
      x-tags:
        - Models
    Job:
      title: Job
      type: object
      description: 'Jobs contain drawers and are part of the production process. '
      properties:
        _id:
          type: string
        Name:
          type: string
        State:
          type: integer
        creationDate:
          type: integer
        lastUpdated:
          type: integer
        securityAssociations:
          type: array
          items:
            type: string
      x-tags:
        - Models
    Drawer:
      title: Drawer
      type: object
      properties:
        _id:
          type: string
        density:
          type: integer
        drawerNotes:
          type: string
        foamColor:
          type: string
        foamThickness:
          type: string
        height:
          type: string
        name:
          type: string
        padColor:
          type: string
        padThickness:
          type: string
        parentJobID:
          type: string
        plasticTray:
          type: string
        plasticTrayColor:
          type: string
        plasticTrayThickness:
          type: string
        width:
          type: string
        securityAssociations:
          type: array
          items:
            type: string
      x-tags:
        - Models
  securitySchemes:
    Bearer Token:
      name: apiKey
      type: apiKey
      in: header
      description: Your unique authentication token provided by the login method
tags:
  - name: Tool Imaging
  - name: Drawer Management
  - name: Job Management
